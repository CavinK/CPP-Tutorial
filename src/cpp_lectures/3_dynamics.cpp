#include <iostream>

using namespace std;

int main()
{
	// stack: 정적 메모리 할당 <- 프로그램이 종료되는 순간 메모리 해제
	// heap: 동적 메모리 할당 <- 프로그램이 종료되도 해제되지 않음! => 명시적으로 해제해줘야!
	
	/*
	동적 할당: 메모리 생성을 원하는 시점에 할 수 있는 기능이다.
	메모리 영역 중 힙 영역 공간이 할당된다.
	힙의 특성 상 메모리를 해제하기 전까지는 계속 남아있다.
	
	동적 할당을 하고 메모리를 해제하지 않으면, 사용하지는 않지만 공간은 계속 잡혀있게 된다.
	해당 공간은 다른 곳에서 사용이 불가능 하다.
	이런 현상을 메모리 릭이라고 한다.
	
	동적 할당은 new 키워드를 이용해서 할 수 있다. <- like Java!
	C 언어에서는 malloc() 함수를 이용해서 할 수 있다.
	
	new 할당할타입; 으로 처리한다 <- int* pNumber = new int;
	
	new나 malloc 둘 다 마찬가지로 힙 영역에 메모리 공간을 할당하고, 해당 메모리의 주소를 반환해준다.
	
	delete 키워드를 이용해서 동적 할당한 메모리를 해제할 수 있다.
	delete 뒤에 메모리 주소를 넣어주면 된다.
	*/
	// 아래처럼 할당해주면 new 뒤에 들어오는 타입인 int의 크기만큼 공간을 할당한다.
	// 즉 4바이트 공간을 할당하는 것이다.
	// 그 뒤에 할당한 공간의 메모리 주소를 pNumber에 넣어주었다
	int* pNumber = new int; // int 4바이트 할당 // pNumber를 이용해서 heap 영역에 접근해서 값을 제어!
	// stack에 int* 포인터 변수를 할당하고, 이를 이용해 heap에 할당된 값을 제어하는 거!!
	// 포인터 변수가 동적 할당되는 게 아니라, 동적 할당된 메모리 주소만 가지고 있을 뿐!!!
	
	*pNumber = 100; // heap에 100 입력
	
	delete pNumber; // 반드시 이렇게 메모리 해제를 해줘야 함!
	
	
	
	/*
	동적 배열 할당 방법: new 타입[개수]; 의 형태로 사용할 수 있다.
	아래처럼 동적 배열로 할당하면 메모리 공간의 400바이트만큼 공간을 할당하고 해당 메모리의 시작 주소를 반환한다.
	*/
	int* pArray = new int[100]; // pArray = iArray = &iArray[0]
	
	pArray[1] = 300; // 이렇게 세팅 가능!
	
	delete[] pArray; // 동적 배열는 연속된 메모리를 할당 => 지울 때 delete[] 사용
	
	return 0;
}